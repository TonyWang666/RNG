/**
 * public class TreeNode {
 *   public int key;
 *   public TreeNode left;
 *   public TreeNode right;
 *   public TreeNode(int key) {
 *     this.key = key;
 *   }
 * }
 */
public class Solution {
  public TreeNode lowestCommonAncestor(TreeNode root,
      TreeNode one, TreeNode two) {
        if(root == null){
          return null;
        }
        if(root == one || root == two){
          return root;
        }
        TreeNode left = lowestCommonAncestor(root.left, one, two);
        TreeNode right = lowestCommonAncestor(root.right, one, two);
        if(left != null && right != null){
          return root;
        } else {
          return left != null ? left : right;
        }
// TC: O(n)
// SC: O(n)
        // if(left == one && right == two || left == two && right == one){
        //   return root;
        // } else if(left == one || left == two){
        //   return left;
        // } else if(right == one || right == two){
        //   return right;
        // } else {
        //   return null;
        // }
        
  }
}