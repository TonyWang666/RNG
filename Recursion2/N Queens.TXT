public class Solution {
  public List<List<Integer>> nqueens(int n) {
    List<List<Integer>> res = new ArrayList<>();
    int[] cur = new int[n]; //index of column in each row
    boolean[] column = new boolean[n]; //valid of each column
    boolean[] posSlope = new boolean[2 * n - 1];
    boolean[] negSlope = new boolean[2 * n - 1];
    helper(0, cur, column, posSlope, negSlope, res);
    return res;
  }
  public void helper(int index, int[] cur, boolean[] column, boolean[] posSlope, boolean[] negSlope, List<List<Integer>> res){
    if(index == cur.length){
      List<Integer> temp = new ArrayList<>();
      for(int i= 0 ; i < cur.length; i++){
        temp.add(cur[i]);
      }
      res.add(temp);
      return;
    }
    for(int i = 0; i < cur.length; i++){
      if(valid(index, i, cur.length, column, posSlope, negSlope)){
        cur[index] = i;
        mark(index, i, cur.length, column, posSlope, negSlope);
        helper(index + 1, cur, column, posSlope, negSlope, res);
        unmark(index, i, cur.length, column, posSlope, negSlope);
      }
    }
  } 
  public boolean valid(int row, int col, int n, boolean[] column, boolean[] posSlope, boolean[] negSlope){
    return !column[col] && !posSlope[row + col] && !negSlope[n - row + col - 1];
  }
  public void mark(int row, int col, int n, boolean[] column, boolean[] posSlope, boolean[] negSlope){
    column[col] = true;
    posSlope[row + col] = true;
    negSlope[n - row + col - 1] = true;
  }
  public void unmark(int row, int col, int n, boolean[] column, boolean[] posSlope, boolean[] negSlope){
    column[col] = false;
    posSlope[row + col] = false;
    negSlope[n - row + col - 1] = false;
  }
}

TC: O(n^2)
SC: O(n)
// n n n n 
// n n n n 
// n n n n 
// n n n n

// firstPos  SecondPos
