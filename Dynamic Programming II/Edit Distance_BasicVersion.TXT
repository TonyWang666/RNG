public class Solution {
  public int editDistance(String one, String two) {
    if(one.length() == 0){
      return two.length();
    }
    if(two.length() == 0){
      return one.length();
    }
    int o = one.length(), t = two.length();
    int[][] M = new int[o + 1][t + 1];
    M[0][0] = 0;
    for(int i = 1; i <= t; i++){
      M[0][i] = i;
    }
    for(int i = 1; i <= o; i++){
      M[i][0] = i;
    }
    
    for(int i = 1; i <= o; i++){
      for(int j = 1; j <= t; j++){
        if(one.charAt(i - 1) == two.charAt(j - 1)){
          M[i][j] = M[i - 1][j - 1];
        } else{
          M[i][j] = 1 + Math.min(Math.min(M[i - 1][j], M[i - 1][j - 1]), M[i][j - 1]);
        }
      }
    }
    return M[o][t];
  }
}

TC: O(m * n)
SC: O(m * n)
  //    "" f g h i
  // "" 0  1 2 3 4
  // a  1  1 2 3 4
  // b  2  2 2 3 4 
  // c  3  3 3 3 4
  // d  4  4 4 4 4
  // e  5  5 5 5 5

// sign
// asith
// 4 operations:
// 1. if s1.char == s2.char: do nothing
//    else:
//    2. delete s1  M[i][j] = 1 + M[i][j - 1]
//    3. insert s1  M[i][j] = 1 + M[i - 1][j - 1]
//    4. update s1  M[i][j] = 1 + M[i][j]

//   i: s1; j: s2
//   s1 = asith
//   s2 = sigh
//   M[i][j] is the minimum edit operations needed to convert s1 to s2 
//   base case: M[0][0] = 0; M[i][0] = i; M[0][j] = j
//   M[i][j] = 1 + Math.min(M[i][j - 1], M[i - 1][j - 1], M[i][j]);
//        "" s i g h   s2         for s1  ==> delete  | add       \   update
//    ""  0  1 2 3 4                                  v             \
//    a   1      
//    s   2
//    i   3
//    t   4
//    h   5

//    s1