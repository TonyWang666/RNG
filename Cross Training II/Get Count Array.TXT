Given an array A of length N containing all positive integers from [1...N]. How to get an array B such that B[i] represents how many elements A[j] (j > i) in array A that are smaller than A[i].

public class Solution {
  public int[] countArray(int[] array) {
    if(array.length == 0){
      return new int[]{};
    }
    int[] countMove = new int[array.length];
    int[] index = generateIndexArray(array);
    int[] helper = new int[array.length];
    mergeSort(0, array.length - 1, index, helper, array, countMove);
    return countMove;
  }
  public void mergeSort(int l, int r, int[] index, int[] helper, int[] array, int[] countMove){
    if(l >= r){
      return;
    }
    int mid = l + (r - l)/2;
    mergeSort(l, mid, index, helper, array, countMove);
    mergeSort(mid + 1, r, index, helper, array, countMove);
    merge(l, r, index, helper, array, countMove);
  }
  public void merge(int left, int right, int[] index, int[] helper, int[] array, int[] countMove){
    int mid = left + (right - left)/2;
    int l = left, r = mid + 1, cur = left;
    copyArray(left, right, helper, index);
    while(l <= mid){
      if(r > right || array[helper[l]] <= array[helper[r]]){
        countMove[helper[l]] += r - mid - 1;
        index[cur++] = helper[l++];
      } else {
        index[cur++] = helper[r++];
      }
    }
  }
  public void copyArray(int left, int right, int[] helper, int[] index){
    for(int i = left; i <= right; i++){
      helper[i] = index[i];
    }
  }
  public int[] generateIndexArray(int[] array){
    int[] res = new int[array.length];
    for(int i = 0; i < array.length; i++){
      res[i] = i;
    }
    return res;
  }
}
