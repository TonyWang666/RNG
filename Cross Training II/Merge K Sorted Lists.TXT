Merge K sorted lists into one big sorted list in ascending order.

/**
 * class ListNode {
 *   public int value;
 *   public ListNode next;
 *   public ListNode(int value) {
 *     this.value = value;
 *     next = null;
 *   }
 * }
 */
public class Solution {
  private static class Pair{
    int index;
    ListNode node;
    public Pair(int i, ListNode n){
      index = i;
      node = n;
    }
  }
    //   PriorityQueue<ListNode> minHeap = new PriorityQueue<>(11, new Comparator<ListNode>(){
    //   @Override
    //   public int compare(ListNode c1, ListNode c2){
    //     if(c1.value == c2.value){
    //       return 0;
    //     }
    //     return c1.value < c2.value ? -1 : 1;
    //   }
    // });
  public ListNode merge(List<ListNode> listOfLists) {
    ListNode dummy = new ListNode(-1);
    ListNode cur = dummy;
    PriorityQueue<Pair> minHeap = new PriorityQueue<>(new Comparator<Pair>(){
      @Override
      public int compare(Pair p1, Pair p2){
        if(p1.node.value == p2.node.value){
          return 0;
        }
        return p1.node.value < p2.node.value ? -1 : 1;
      }
    });    
    preProcessPQ(minHeap, listOfLists);
    while(!minHeap.isEmpty()){
      Pair curPair = minHeap.poll();
      ListNode curNode = curPair.node;
      cur.next = curNode;
      cur = cur.next;
      if(curNode.next != null){
        minHeap.offer(new Pair(curPair.index, curNode.next));
      }
      curNode.next = null;
    }
    return dummy.next;
  }
  public void preProcessPQ(PriorityQueue<Pair> minHeap, List<ListNode> list){
    for(int i = 0; i < list.size(); i++){
      minHeap.offer(new Pair(0, list.get(i)));
    }
  }
}
