Make a deep copy of an undirected graph, there could be cycles in the original graph.

/*
* class GraphNode {
*   public int key;
*   public List<GraphNode> neighbors;
*   public GraphNode(int key) {
*     this.key = key;
*     this.neighbors = new ArrayList<GraphNode>();
*   }
* }
*/
public class Solution {
  public List<GraphNode> copy(List<GraphNode> graph) {
    if(graph == null || graph.size() == 0){
      return null;
    }
    Map<GraphNode, GraphNode> map = new HashMap<>();
    for(GraphNode each : graph){
      if(!map.containsKey(each)){
        map.put(each, new GraphNode(each.key));
        helper(each, map);
      }
    }
    return new ArrayList<GraphNode>(map.values());
  }
  public void helper(GraphNode node, Map<GraphNode, GraphNode> map){
    GraphNode copy = map.get(node);
    for(GraphNode nei : node.neighbors){
      GraphNode copyNei = map.get(nei);
      if(copyNei == null){
        copyNei = new GraphNode(nei.key);
        map.put(nei, copyNei);
        helper(nei, map);
      }
      copy.neighbors.add(copyNei);
    }
  }
}
