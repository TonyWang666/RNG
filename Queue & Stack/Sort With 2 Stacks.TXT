Sort With 2 Stacks
Given an array that is initially stored in one stack, sort it with one additional stacks (total 2 stacks).

After sorting the original stack should contain the sorted integers and from top to bottom the integers are sorted in ascending order.

public class Solution {
  public void sort(LinkedList<Integer> s1) {
    if(s1.size() <= 1){
      return;
    }
    LinkedList<Integer> s2 = new LinkedList<Integer>();
    while(!s1.isEmpty()){
      //int max = s2.peekFirst() == null ? Integer.MIN_VALUE : s2.peekFirst();
      int max = Integer.MIN_VALUE;
      int count = 1;
      while(!s1.isEmpty()){
        int cur = s1.pollLast();
        if(cur > max){
          max = cur;
          count = 1;
        }
        else if(cur == max){
          count++;
        }
        s2.offerLast(cur);
      }
      while(!s2.isEmpty() && s2.peekLast() <= max){
        int cur = s2.pollLast();
        if(cur < max){
          s1.offerLast(cur);
        }
      }
      for(int i = 0; i < count; i++){
        s2.offerLast(max);
      }
    }
    while(!s2.isEmpty()){
      s1.offerLast(s2.pollLast());
    }
  }
}

//TC: O(n^2)
//SC: O(1)