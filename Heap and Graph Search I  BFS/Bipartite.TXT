Determine if an undirected graph is bipartite. A bipartite graph is one in which the nodes can be divided into two groups such that no nodes have direct edges to other nodes in the same group.
/**
 * public class GraphNode {
 *   public int key;
 *   public List<GraphNode> neighbors;
 *   public GraphNode(int key) {
 *     this.key = key;
 *     this.neighbors = new ArrayList<GraphNode>();
 *   }
 * }
 */
public class Solution {
  public boolean isBipartite(List<GraphNode> graph) {
    if(graph.size() <= 1){
      return true;
    }
    Map<GraphNode, Integer> visited = new HashMap<>();
    for(int i =  0; i < graph.size(); i++){
      if(!visited.containsKey(graph.get(i))){
        boolean flag = isBipartiteBFS(graph.get(i), visited);
        if(!flag){
          return flag;
        }
      }
    }
    return true;
  }
  public boolean isBipartiteBFS(GraphNode root, Map<GraphNode, Integer> visited){
    Deque<GraphNode> queue = new ArrayDeque<>();
    queue.offerLast(root);
    while(!queue.isEmpty()){
      GraphNode cur = queue.pollFirst();
      int mark = visited.containsKey(cur) ? visited.get(cur) : 1;
      visited.put(cur, mark);
      List<GraphNode> neis = cur.neighbors;
      int neisMark = mark == 1 ? 0 : 1;
      for(int i = 0; i < neis.size(); i++){
        GraphNode curNei = neis.get(i);
        if(!visited.containsKey(curNei)){
          visited.put(curNei, neisMark);
          queue.offerLast(curNei);
        } else {
          int newMark = visited.get(curNei);
          if(newMark != neisMark){
            return false;
          }
        }
      }
    }
    return true;
  }
}

// for all nodes:
//   BFS()
// visited: 1, 2, 3
// mark: 1:true; 2:false; 3:true; 4:true;

