public class Solution {
  static class Cell{
    int x;
    int y;
    int value;
    public Cell(int x, int y, int value){
      this.x = x;
      this.y = y;
      this.value = value;
    }
  }
  public int kthSmallest(int[][] matrix, int k) {
    PriorityQueue<Cell> pq = new PriorityQueue<>(new Comparator<Cell>(){
      @Override
      public int compare(Cell c1, Cell c2){
        if(c1.value == c2.value){
          return 0;
        }
        return c1.value < c2.value ? -1 : 1;
      }
    });
    boolean[][] visited = new boolean[matrix.length][matrix[0].length];
    pq.offer(new Cell(0, 0, matrix[0][0]));
    for(int i = 0; i < k - 1; i++){
      Cell cur = pq.poll();
      int x = cur.x, y = cur.y;
      if(x + 1 < matrix.length && !visited[x + 1][y]){
        visited[x + 1][y] = true;
        pq.offer(new Cell(x + 1, y, matrix[x + 1][y]));
      }
      if(y + 1 < matrix[0].length && !visited[x][y + 1]){
        visited[x][y + 1] = true;
        pq.offer(new Cell(x, y + 1, matrix[x][y + 1]));
      }
    }
    return pq.poll().value;
  }
}

// TC: O(klogn)
// SC: O(k)