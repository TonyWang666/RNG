Given a rope with positive integer-length n, how to cut the rope into m integer-length parts with length p[0], p[1], ...,p[m-1], in order to get the maximal product of p[0]*p[1]* ... *p[m-1]? m is determined by you and must be greater than 0 (at least one cut must be made). Return the max product you can have.
//We should use left big trunck and right small trunk
public class Solution {
  public int maxProduct(int length) {
    int[] M = new int[length]; //i position means cut on i's right
    M[0] = 1;
    for(int i = 1; i < length; i++){
      int max = 0;
      for(int j = 0; j < i; j++){
        max = Math.max(max, Math.max(j + 1, M[j]) * (i - j));
      }
      M[i] = max;
    }
    return M[length - 1];
  }
}
//TC: O(n^2)
//SC: O(n)




   