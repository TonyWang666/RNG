Repeatedly remove all adjacent, repeated characters in a given string from left to right.

No adjacent characters should be identified in the final string.


public class Solution {
  public String deDup(String input) {
    //we do inplace replacement
    if(input == null || input.length() <= 1){
      return input;
    }
    char[] array = input.toCharArray(); 
    int slow = 1, fast = 1; //slow left is the element we want
    while(fast < array.length){
      while(slow != 0 && fast < array.length && array[slow - 1] == array[fast]){
        while(fast < array.length && array[slow - 1] == array[fast]){
          fast++;
        }
        slow--;
      }
      if(fast < array.length){
        array[slow++] = array[fast++];
      }
    }
    return new String(array, 0, slow);
  }
}

// TC: O(n)
// SC: O(1)