public class Solution {
  public int longestConsecutiveOnes(int[] nums, int k) {
    int max = 0, left = 0, right = 0, count = 0;
    while(right < nums.length){
      if(nums[right] == 1){
        max = Math.max(max, right++ - left + 1);
      }
      else if(count < k){
        max = Math.max(max, right++ - left + 1);
        count++;
      }
      else if(nums[left++] == 0){
        count--;
      }
    }
    return max;
  }
}
// TC: O(n)
// SC: O(1)

// 1 1 0 0 0 1 k = 2
//       l
//           r
// count = 2      (count < k, then count++)
// max = 4        (right - left + 1)
// move slow to next index of the first zero it finds and count--