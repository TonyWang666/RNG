642. Design Search Autocomplete System

Design a search autocomplete system for a search engine. Users may input a sentence (at least one word and end with a special character '#'). For each character they type except '#', you need to return the top 3 historical hot sentences that have prefix the same as the part of sentence already typed. Here are the specific rules:

The hot degree for a sentence is defined as the number of times a user typed the exactly same sentence before.
The returned top 3 hot sentences should be sorted by hot degree (The first is the hottest one). If several sentences have the same degree of hot, you need to use ASCII-code order (smaller one appears first).
If less than 3 hot sentences exist, then just return as many as you can.
When the input is a special character, it means the sentence ends, and in this case, you need to return an empty list.

Method#1: For loop with hashMap and ArrayList:

class AutocompleteSystem {
    public class Cell {
        private String sentence;
        private int time;
        public Cell() {
            sentence = "";
            time = 0;
        }
        public Cell(String sentence, int time) {
            this.sentence = sentence;
            this.time = time;
        }
    }
    private Map<String, Integer> map;
    private String curSearch = "";
    public AutocompleteSystem(String[] sentences, int[] times) {
        map = new HashMap<>();
        for(int i = 0; i< sentences.length; i++) {
            map.put(sentences[i], times[i]);
        }
    }
    
    public List<String> input(char c) {
        List<String> res = new ArrayList<>();
        if(c == '#') {
            map.put(curSearch, map.getOrDefault(curSearch, 0) + 1);
            curSearch = "";
        } else {
            List<Cell> list = new ArrayList<>();
            curSearch += c;
            for(String key : map.keySet()) {
                if(key.indexOf(curSearch) == 0) {
                    list.add(new Cell(key, map.get(key)));
                }
            }
            Collections.sort(list, (a, b) -> a.time == b.time ? a.sentence.compareTo(b.sentence) : b.time - a.time);
            for(int i = 0; i < 3 && i < list.size(); i++) {
                res.add(list.get(i).sentence);
            }
        }
        return res;
    }
}

// AutocompleteSystem takes O(k * l) 
// k * l: to put all sentences and times into hashmap
// k: average length of sentences(to create hashvalue); l: length of sentences

//input takes O(n + mlogm)
// n: length of current hashmap to loop through and add to list
// m: length of list after looping and takes m log m to sort the list.

/**
 * Your AutocompleteSystem object will be instantiated and called as such:
 * AutocompleteSystem obj = new AutocompleteSystem(sentences, times);
 * List<String> param_1 = obj.input(c);
 */


//Time Complexity faster than 5.20%
//Memory less than 100.00%



Method#2: MapReduce Method to reduce loop size:
All the steps are similar to the Method#1.
Except that we create 26 HashMap according to a-z.
Therefore, we only need to loop through a smaller HashMap each time, which is efficient.





Method#3: Using Trie

Similar to the things before



