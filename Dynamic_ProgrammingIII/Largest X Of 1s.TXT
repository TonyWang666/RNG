Given a matrix that contains only 1s and 0s, find the largest X shape which contains only 1s, with the same arm lengths and the four arms joining at the central point.

//TC: O(n^2)
//SC: O(n^2)
public class Solution {
  public int largest(int[][] matrix) {
    if(matrix.length == 0 || matrix[0].length == 0){
      return 0;
    }
    int m = matrix.length, n = matrix[0].length;
    int[][] topArray = generateTop(matrix, m, n);
    int[][] botArray = generateBot(matrix, m, n);
    return merge(topArray, botArray);
  }
  public int[][] generateTop(int[][] matrix, int m, int n){
    int[][] leftTop = new int[m][n];  //from leftTop to rightBot
    int[][] rightTop = new int[m][n]; //from rightTop to leftBot
    for(int i = 0; i < m; i++){
      for(int j = 0; j < n; j++){
        if((matrix[i][j]) == 1){
          if(i == 0){
            leftTop[i][j] = 1;
            rightTop[i][j] = 1;
          } else if(j == 0) {
            leftTop[i][j] = 1;
            rightTop[i][j] = rightTop[i - 1][j + 1] + 1;
          } else if(j == n - 1) { 
            leftTop[i][j] = leftTop[i - 1][j - 1] + 1;
            rightTop[i][j] = 1;
          } else {
            leftTop[i][j] = leftTop[i - 1][j - 1] + 1;
            rightTop[i][j] = rightTop[i - 1][j + 1] + 1;
          }
        }
      }
    }
    merge(leftTop, rightTop); //merge two elements in each position into one by taking smaller one and save into leftTop
    return leftTop;
  }

  public int[][] generateBot(int[][] matrix, int m, int n){
    int[][] leftBot = new int[m][n];
    int[][] rightBot = new int[m][n];
    for(int i = m - 1; i >= 0; i--){
      for(int j = n - 1; j >= 0; j--){
        if(matrix[i][j] == 1){
          if(i == m - 1){
            leftBot[i][j] = 1;
            rightBot[i][j] = 1;
          } else if(j == 0) {
            leftBot[i][j] = 1;
            rightBot[i][j] = rightBot[i + 1][j + 1] + 1;
          } else if(j == n - 1) {
            leftBot[i][j] = leftBot[i + 1][j - 1] + 1;
            rightBot[i][j] = 1;
          } else {
            leftBot[i][j] = leftBot[i + 1][j - 1] + 1;
            rightBot[i][j] = rightBot[i + 1][j + 1] + 1;
          }
        }
      }
    }
    merge(leftBot, rightBot);
    return leftBot;
  }

  public int merge(int[][] array1, int[][] array2){
    int max = Integer.MIN_VALUE;
    for(int i = 0; i < array1.length; i++){
      for(int j = 0; j < array1[0].length; j++){
        array1[i][j] = Math.min(array1[i][j], array2[i][j]);
        max = Math.max(array1[i][j], max);
      }
    }
    return max;
  }
}
