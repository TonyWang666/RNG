//TC: O(n^3)
//SC: O(n^2)
public class Solution {
  public int largestSquareSurroundedByOne(int[][] matrix) {
    if(matrix.length == 0 || matrix[0].length == 0){
      return 0;
    }
    int m = matrix.length, n = matrix[0].length;
    int[][] toLeft = new int[m][n];
    int[][] toUp = new int[m][n];
    generateLeftAndUp(matrix, m, n, toLeft, toUp);
    int max = 0;
    for(int i = 0; i < matrix.length; i++){
      for(int j = 0; j < matrix[0].length; j++){
        if(matrix[i][j] == 1){
          int k = Math.min(toLeft[i][j], toUp[i][j]) - 1; //k + 1 is the largest possible bianchang
          while(k >= 0){
            if(toLeft[i + k][j] >= k + 1 && toUp[i][j + k] >= k + 1){
              max = Math.max(max, k + 1);
              break;
            }
            k--;
          }
        }
      }
    }
    return max;
  }

  public void generateLeftAndUp(int[][] matrix, int m, int n, int[][] toLeft, int[][] toUp){
    for(int i = m - 1; i >= 0; i--){
      for(int j = n - 1; j >= 0; j--){
        if(matrix[i][j] == 1){
          if(i == m - 1 && j == n - 1){
            toLeft[i][j] = 1;
            toUp[i][j] = 1;
          } else if(i == m - 1) {
            toLeft[i][j] = toLeft[i][j + 1] + 1;
            toUp[i][j] = 1;
          } else if(j == n - 1){
            toLeft[i][j] = 1;
            toUp[i][j] = toUp[i + 1][j] + 1;
          } else {
            toLeft[i][j] = toLeft[i][j + 1] + 1;
            toUp[i][j] = toUp[i + 1][j] + 1;
          }
        }
      }
    }
  }
}
