Determine the largest square surrounded by a bunch of matches (each match is either horizontal or vertical), return the length of the largest square.

The input is a matrix of points. Each point has one of the following values:

0 - there is no match to its right or bottom.

1 - there is a match to its right.

2 - there is a match to its bottom.

3 - there is a match to its right, and a match to its bottom.

// TC: O(n^2)
// SC: O(n^2)
public class Solution {
  public int largestSquareOfMatches(int[][] matrix) {
    if(matrix.length == 0 || matrix[0].length == 0){
      return 0;
    }
    int m = matrix.length, n = matrix[0].length;
    return merge(dpRTL(matrix, m, n), dpBTT(matrix, m, n), m, n); 
  }
  public int[][] dpRTL(int[][] matrix, int m, int n){
    int[][] res = new int[m][n];
    for(int i = 0; i < m; i++){
      for(int j = n - 2; j >= 0; j--){
        if(matrix[i][j] == 1 || matrix[i][j] == 3){
          res[i][j] = res[i][j + 1] + 1;
        }
      }
    }
    return res;
  }
  public int[][] dpBTT(int[][] matrix, int m, int n){
    int[][] res = new int[m][n];
    for(int j = 0; j < n; j++){
      for(int i = m - 2; i >= 0; i--){
        if(matrix[i][j] == 2 || matrix[i][j] == 3){
          res[i][j] = res[i + 1][j] + 1;
        }
      }
    }
    return res;
  }
  //m1 is right to left, m2 is bottom to top
  public int merge(int[][] m1, int[][] m2, int m, int n){
    int max = 0;
    for(int i = 0; i < m; i++){
      for(int j = 0; j < n; j++){
        int min = Math.min(m1[i][j], m2[i][j]);
        while(min >= 0){
          if(m1[i + min][j] >= min && m2[i][j + min] >= min){
            max = Math.max(max, min);
          }
          min--;
          }
        }
      }
    return max;
  }
}
