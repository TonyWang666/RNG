Given a matrix that contains only 1s and 0s, find the largest cross which contains only 1s, with the same arm lengths and the four arms joining at the central point.

Return the arm length of the largest cross.

//TC: O(n^2)
//SC: O(n^2)
public class Solution {
  public int largest(int[][] matrix) {
    if(matrix.length == 0 || matrix[0].length == 0){
      return 0;
    }
    int[][] minLeftUp = generateLeftUp(matrix);
    int[][] minRightDown = generateRightDown(matrix); 
    return merge(minLeftUp, minRightDown);
  }
  public int[][] generateLeftUp(int[][] matrix){
    int m = matrix.length, n = matrix[0].length;
    int[][] leftCum = new int[m][n];
    int[][] upCum = new int[m][n];
    for(int i = 0; i < m; i++){
      for(int j = 0; j < n; j++) {
        if(matrix[i][j] == 1){
          if(i == 0 && j == 0) {
            leftCum[i][j] = 1;
            upCum[i][j] = 1;
          } else if(i == 0) {
            leftCum[i][j] = leftCum[i][j - 1] + 1;
            upCum[i][j] = 1;
          } else if(j == 0) {
            leftCum[i][j] = 1;
            upCum[i][j] = upCum[i - 1][j] + 1;
          } else {
            leftCum[i][j] = leftCum[i][j - 1] + 1;
            upCum[i][j] = upCum[i - 1][j] + 1;
          }
        }
      }
    }
    merge(leftCum, upCum);
    return leftCum;
  }

  public int[][] generateRightDown(int[][] matrix){
    int m = matrix.length, n = matrix[0].length;
    int[][] right = new int[m][n];
    int[][] down = new int[m][n];
    for(int i = m - 1; i >= 0; i--){
      for(int j = n - 1; j >= 0; j--){
        if(matrix[i][j] == 1){
          if(i == m - 1 && j == n - 1) {
            right[m - 1][n - 1] = 1;
            down[m - 1][n - 1] = 1;
          } else if(i == m - 1) {
            right[i][j] = right[i][j + 1] + 1;
            down[i][j] = 1;
          } else if(j == n - 1) {
            right[i][j] = 1;
            down[i][j] = down[i + 1][j] + 1;
          } else {
            right[i][j] = right[i][j + 1] + 1;
            down[i][j] = down[i + 1][j] + 1;
          }
        }
      }
    }
    merge(right, down);
    return right;
  }

  public int merge(int[][] array1, int[][] array2){
    int max = Integer.MIN_VALUE;
    for(int i = 0; i < array1.length; i++){
      for(int j = 0; j < array1[0].length; j++){
        array1[i][j] = Math.min(array1[i][j], array2[i][j]);
        max = Math.max(max, array1[i][j]);
      }
    }
    return max;
  }
}
