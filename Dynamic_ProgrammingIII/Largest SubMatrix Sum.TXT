Given a matrix that contains integers, find the submatrix with the largest sum.

Return the sum of the submatrix.

// TC: O(n^3)
// SC: O(n^2)
public class Solution {
  public int largest(int[][] matrix) {
    if(matrix.length == 0 || matrix[0].length == 0){
      return 0;
    }
    int m = matrix.length, n = matrix[0].length;
    int[][] prefixSumCol = new int[m][n];
    for(int j = 0; j < n; j++){
      for(int i = 0; i < m; i++){
        if(i == 0){
          prefixSumCol[i][j] = matrix[i][j];
        } else {
          prefixSumCol[i][j] = matrix[i][j] + prefixSumCol[i - 1][j];
        }
      }
    }
    int largest = Integer.MIN_VALUE;
    for(int i = 0; i < m; i++){
      for(int j = i; j < m; j++){
        int curLargest = 0;
        for(int k = 0; k < n; k++){
          int newColSum = prefixSumCol[j][k] - prefixSumCol[i][k] + matrix[i][k];
          curLargest = k == 0 ? newColSum : Math.max(curLargest + newColSum, newColSum);
          largest = Math.max(largest, curLargest);
        }
      }
    }
    return largest;
  }
}
