Given a linked list, check whether it is a palindrome.
/**
 * class ListNode {
 *   public int value;
 *   public ListNode next;
 *   public ListNode(int value) {
 *     this.value = value;
 *     next = null;
 *   }
 * }
 */
public class Solution {
  public boolean isPalindrome(ListNode head) {
    if(head == null){
      return true;
    }
    ListNode slow = head, fast = head;
    while(fast.next != null && fast.next.next != null){
      slow = slow.next;
      fast = fast.next.next;
    }
    ListNode second = reverse(slow.next);
    slow.next = null;
    while(second != null){
      if(head.value != second.value){
        return false;
      } else {
        second = second.next;
        head = head.next;
      }
    }
    return true;
  } 
  public ListNode reverse(ListNode head){
    if(head == null || head.next == null){
      return head;
    }
    ListNode newHead = reverse(head.next);
    head.next.next = head;
    head.next = null;
    return newHead;
  }
}

// TC: O(n)
// SC: O(1)

