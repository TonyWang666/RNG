Find all Factor Combinations given a target with integer type:
public class Solution {
  public List<List<Integer>> combinations(int target) {
    List<List<Integer>> res = new ArrayList<>();
    if(target <= 2){
      return res;
    }
    List<Integer> factors = getFactors(target);
    helper(0, target, factors, new LinkedList<>(), res);
    return res;
  }
  public void helper(int index, int remain, List<Integer> factors, List<Integer> cur, List<List<Integer>> res){
    if(remain == 1){
      res.add(new ArrayList<>(cur));
      return;
    }
    if(index == factors.size()){
      return;
    }
    int value = factors.get(index);
    helper(index + 1, remain, factors, cur, res); //use 0 value here
    int counter = 0;
    while(remain % value == 0){
      remain /= value;
      cur.add(value);
      counter++;
      helper(index + 1, remain, factors, cur, res);
    }
    while(counter > 0){
      counter--;
      cur.remove(cur.size() - 1);
    }
  }
  public List<Integer> getFactors(int target){
    List<Integer> res = new ArrayList<>();
    for(int i = 2; i <= target / 2; i++){
      if(target % i == 0){
        res.add(i);
      }
    }
    return res;
  }
}
//let n be target
// let k be nums of factors
// TC: O((logn + 1)^k)
// SC: O(log n)  log n must larger than k