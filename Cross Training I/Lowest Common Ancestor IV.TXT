Given K nodes in a binary tree, find their lowest common ancestor.

/**
 * public class TreeNode {
 *   public int key;
 *   public TreeNode left;
 *   public TreeNode right;
 *   public TreeNode(int key) {
 *     this.key = key;
 *   }
 * }
 */
public class Solution {
  public TreeNode lowestCommonAncestor(TreeNode root, List<TreeNode> nodes) {
    Set<TreeNode> set = new HashSet<>();
    for(int i = 0; i < nodes.size(); i++){
      set.add(nodes.get(i));
    }
    return helper(root, set);
  }
  public TreeNode helper(TreeNode root, Set<TreeNode> set){
    if(root == null){
      return null;
    }
    if(set.contains(root)){
      return root;
    }
    TreeNode left = helper(root.left, set);
    TreeNode right = helper(root.right, set);
    if(left == null && right == null){
      return null;
    }
    if(left == null || right == null){
      return left == null ? right : left;
    } else {
      return root;
    }
  }
}

// TC: O(n)
// SC: O(n)