Use the least number of comparisons to get the largest and 2nd largest number in the given integer array. Return the largest number and 2nd largest number.
public class Solution {
  static class Element{
    int value;
    List<Integer> compare;
    public Element(int value){
      this.value = value;
      compare = new ArrayList<>();
    }
  }
  public int[] largestAndSecond(int[] array) {
    Element[] curList = convert(array);
    int compareLen = array.length;
    while(compareLen > 1){
      helper(curList, compareLen);
      compareLen = (compareLen + 1)/2;
    }
    return new int[]{curList[0].value, findLargest(curList[0].compare)};
  }
  public int findLargest(List<Integer> compare){
    int max = compare.get(0);
    for(int each : compare){
      max = Math.max(max, each);
    }
    return max;
  }
  public void helper(Element[] curList, int compareLen){
    for(int i = 0; i < compareLen/2; i++){
      if(curList[i].value < curList[compareLen - i - 1].value){
        swap(curList, i, compareLen - i - 1);
      }
      curList[i].compare.add(curList[compareLen - i - 1].value);
    }
  }
  public void swap(Element[] curList, int i, int j){
    Element temp = curList[i];
    curList[i] = curList[j];
    curList[j] = temp;
  }
  public Element[] convert(int[] array){
    Element[] res = new Element[array.length];
    for(int i = 0; i < array.length; i++){
      res[i] = new Element(array[i]);
    }
    return res;
  }
}
//n/2 + n/2 + n/2 = 1.5n comparison