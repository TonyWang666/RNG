Rotate an N * N matrix clockwise 90 degrees.
public class Solution {
  public void rotate(int[][] matrix) {
    if(matrix.length == 0){
      return;
    }
    int size = matrix.length;
    for(int i = 0; i < size/2; i++){
      for(int j = i; j < size - i - 1; j++){
        // i' = size - j - 1
        // j' = i
        //current Matrix [i][j]  then last Matrix [size - j - 1][i]
        int origin = matrix[i][j];
        matrix[i][j] = matrix[size - j - 1][i];
        matrix[size - j - 1][i] = matrix[size - i - 1][size - j - 1];
        matrix[size - i - 1][size - j - 1] = matrix[j][size - i - 1]; //[size - (size-j-1) - 1]\
        matrix[j][size - i - 1] = origin;  
      }
    }
    return;
  }
}
// let n be side of matrix
// TC: O(n^2)
// SC: O(1)

// we want i' = ?, j' = ?
// i = j'
// j = size - i' - 1
// so:
// i' = size - j - 1
// j' = i
// // [i][j] ==> [j][size - i - 1]
//     0  0       0     3
//     0  3       3     3
// [[13, 9, 5, 1], 
// [14, 10, 6, 2], 
// [15, 11, 7, 3], 
// [16, 12, 8, 4]]

// [[4, 8, 3, 16], 
// [5, 7, 11, 15], 
// [2, 6, 10, 12], 
// [1, 14, 9, 13]]




// for i: 0 -> i <= size/2
//    for j = i; j <= size/2
// int origin = 1;
// [i][j] ==> [j][size - i - 1]
//  0  0       0 3
// [i][j] ==> [j][size - i - 1]
//  1  1       1 2


// [i][j] ==> [j][size - i - 1]
//  0  3       3 3
// [i][j] ==> [j][size - i - 1]
//  1  2       2 2

// [i][j] ==> [j][size - i - 1]
//  3  3       3  0
// [i][j] ==> [j][size - i - 1]
//  2  2       2 1