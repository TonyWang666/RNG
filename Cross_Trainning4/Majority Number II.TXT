Given an integer array of length L, find all numbers that occur more than 1/3 * L times if any exist.
public class Solution {
  public List<Integer> majority(int[] array) {
    List<Integer> res = new ArrayList<>();
    int size = array.length;
    if(size == 0){
      return res;
    }
    int cur1 = 0, count1 = 0, cur2 = 0, count2 = 0;
    for(int i = 0; i < size; i++){
      if(count1 == 0 || cur1 == array[i]){
        cur1 = array[i];
        count1++;
      } 
      else if(count2 == 0 || cur2 == array[i]){
        cur2 = array[i];
        count2++;
      }
      else{ //battle
        count1--;
        count2--;
      }
    }
    if(count1 != 0 && count(cur1, array) > size/3){
      res.add(cur1);
    }
    if(count2 != 0 && count(cur2, array) > size/3){
      res.add(cur2);
    }
    return res;
  }
  public int count(int target, int[] arr){
    int count = 0;
    for(int i = 0; i < arr.length; i++){
      if(arr[i] == target){
        count++;
      }
    }
    return count;
  }
}
